// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for host authentication
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  password      String?
  image         String?
  role          String    @default("HOST") // "ADMIN", "HOST" or "GUEST"
  externalId    String?   @unique  // Clerk user ID
  accounts      Account[]
  sessions      Session[]
  events        Event[]   // Make sure this matches the relation name in Event model
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// NextAuth.js Models
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Event model with private and pin fields
model Event {
  id             String    @id @default(uuid())
  name           String
  date           DateTime
  welcomeMessage String?   @default("")
  description    String?
  location       String?
  bannerUrl      String?   // Stores the uploaded banner image path
  private        Boolean   @default(false)
  pin            String?
  userId         String?
  user           User?     @relation(fields: [userId], references: [id])
  photos         Photo[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Photo model
model Photo {
  id           String   @id @default(uuid())
  url          String
  publicId     String?
  eventId      String
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  albumId      String?
  uploaderName String?
  caption      String?
  createdAt    DateTime @default(now())
} 